/*
Copyright 2020 The RUIJIE Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "pgoperator/pkg/apis/cluster/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PatroniClusterLister helps list PatroniClusters.
// All objects returned here must be treated as read-only.
type PatroniClusterLister interface {
	// List lists all PatroniClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PatroniCluster, err error)
	// PatroniClusters returns an object that can list and get PatroniClusters.
	PatroniClusters(namespace string) PatroniClusterNamespaceLister
	PatroniClusterListerExpansion
}

// patroniClusterLister implements the PatroniClusterLister interface.
type patroniClusterLister struct {
	indexer cache.Indexer
}

// NewPatroniClusterLister returns a new PatroniClusterLister.
func NewPatroniClusterLister(indexer cache.Indexer) PatroniClusterLister {
	return &patroniClusterLister{indexer: indexer}
}

// List lists all PatroniClusters in the indexer.
func (s *patroniClusterLister) List(selector labels.Selector) (ret []*v1alpha1.PatroniCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PatroniCluster))
	})
	return ret, err
}

// PatroniClusters returns an object that can list and get PatroniClusters.
func (s *patroniClusterLister) PatroniClusters(namespace string) PatroniClusterNamespaceLister {
	return patroniClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PatroniClusterNamespaceLister helps list and get PatroniClusters.
// All objects returned here must be treated as read-only.
type PatroniClusterNamespaceLister interface {
	// List lists all PatroniClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PatroniCluster, err error)
	// Get retrieves the PatroniCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PatroniCluster, error)
	PatroniClusterNamespaceListerExpansion
}

// patroniClusterNamespaceLister implements the PatroniClusterNamespaceLister
// interface.
type patroniClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PatroniClusters in the indexer for a given namespace.
func (s patroniClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PatroniCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PatroniCluster))
	})
	return ret, err
}

// Get retrieves the PatroniCluster from the indexer for a given namespace and name.
func (s patroniClusterNamespaceLister) Get(name string) (*v1alpha1.PatroniCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("patronicluster"), name)
	}
	return obj.(*v1alpha1.PatroniCluster), nil
}
